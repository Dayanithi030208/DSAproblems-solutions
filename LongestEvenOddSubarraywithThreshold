class Solution {
    public int longestAlternatingSubarray(int[] nums, int threshold) {
        int n=nums.length;
        int maxlen=0;
        // bruteforce
        for(int i=0;i<n;i++){
            if(nums[i]%2!=0||nums[i]>threshold) continue;
            int j=i+1;
            for(;j<n;j++){
                if(nums[j]%2!=nums[j-1]%2&&nums[j]<=threshold) continue;
                else break;
            }
            maxlen=Math.max(maxlen,j-i);
        }
        return maxlen;
    }
}
class Solution {
    public int longestAlternatingSubarray(int[] nums, int threshold) {
        int n=nums.length;
        int maxlen=0;
        // // bruteforce
        // for(int i=0;i<n;i++){
        //     if(nums[i]%2!=0||nums[i]>threshold) continue;
        //     int j=i+1;
        //     for(;j<n;j++){
        //         if(nums[j]%2!=nums[j-1]%2&&nums[j]<=threshold) continue;
        //         else break;
        //     }
        //     maxlen=Math.max(maxlen,j-i);
        // }
        // return maxlen;
        // int i=0,j=0;
        // while(i<n&&j<n){
        //     if(nums[i]%2==0&&nums[i]<=threshold){
        //         j=i+1;
        //         while(j<n&&nums[j]%2!=nums[j-1]%2&&nums[j]<=threshold){
        //             j++;
        //         }
        //         maxlen=Math.max(maxlen,j-i);
        //     }
        //     i++;
        // }
        // return maxlen;
        int left=0;
       int right=0;
       for(;right<n;right++){
        if(nums[right]>threshold) {
            left=right+1;
            continue;
        }
        if(left==right){
            if(nums[right]%2!=0) left++;
        }
        else if(nums[right]%2==nums[right-1]%2){
            left=right;
            if(nums[right]%2!=0) left++;
        }
        maxlen=Math.max(maxlen,right-left+1);
       } 
       return maxlen;
    }
}
