class Solution {
    public int[] searchRange(int[] nums, int target) {
        // Approach 1
        // int[] ans={-1,-1};
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]==target&&ans[0]==-1){
        //         ans[0]=i;
        //         ans[1]=i;
        //     }
        //     if(nums[i]==target&&ans[0]!=-1){
        //         ans[1]=i;
        //     }
        // }
        // return ans;
        //Approach 2
        int[] ans={-1,-1};
        ans[0]=lb(nums,target);
        ans[1]=ub(nums,target);
        return ans;
    }
    public static int lb(int[] nums,int target){
        int left=0;
        int right=nums.length-1;
        int ans=-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]==target){
                ans=mid;
                right=mid-1;
            }
            else if(nums[mid]>target){
                right=mid-1;
            }
            else left=mid+1;
        }
        return ans;
    }
    public static int ub(int[] nums,int target){
        int left=0;
        int right=nums.length-1;
        int ans=-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]==target){
                ans=mid;
                left=mid+1;
            }
            else if(nums[mid]>target) right=mid-1;
            else left=mid+1;
        }
        return ans;
    }
}
