Approach1:
package com.practice.demo;

public class RowWithMaxOnes {
	public static void main(String[] args) {
		int[][] matrix= {{0,0,0},{0,1,1},{0,1,1}};
		int row=matrix.length;
		int col=matrix[0].length;
		int maxcnt=0,rowans=-1;
		for(int i=0;i<row;i++) {
			int cnt=0;
			for(int j=0;j<col;j++) {
				if(matrix[i][j]==1) {
					cnt++;
				}
			}
			if(cnt>maxcnt) {
				cnt=maxcnt;
				rowans=i;
			}
		}
		System.out.println(rowans);
	}
}
Approach 2:
package com.practice.demo;

public class RowWithMaxOnes {
	public static void main(String[] args) {
		int[][] matrix= {{1,1,1},{0,1,1},{0,1,1}};
		int row=matrix.length;
		int col=matrix[0].length;
		int maxcnt=0,rowans=-1;
		for(int i=0;i<row;i++) {
			int cnt=Math.max(maxcnt,cntcal(matrix,i));
			if(cnt>maxcnt) {
				rowans=i;
				maxcnt=cnt;
			}
		}
		System.out.println(rowans);
	}
	private static int cntcal(int[][] matrix,int i) {
		int low=0;
		int high=matrix[i].length-1;
		int len=matrix[i].length;
		while(low<=high) {
			int mid=(low+high)/2;
			if(matrix[i][mid]==1) {
				high=mid-1;
			}else {
				low=mid+1;
			}
		}
		return len-low;
	}
}
