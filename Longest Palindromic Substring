class Solution {
    public String longestPalindrome(String s) {
        // brute force 
        // String longest="";
        // int n=s.length();
        // for(int i=0;i<n;i++){
        //     for(int j=i;j<n;j++){
        //         String sub=s.substring(i,j+1);
        //         if(isPalindrome(sub)&&sub.length()>longest.length()) longest=sub;
        //     }
        // }
        // return longest;
        // optimal
        int start=0;
        int end=0;
        int n=s.length();
        for(int i=0;i<n;i++){
            int len1=expandFromCenter(s,i,i);
            int len2=expandFromCenter(s,i,i+1);
            int len=Math.max(len1,len2);
            if(len>end-start){
                start=i-(len-1)/2;
                end=i+len/2;
            }
        }
         return s.substring(start,end+1);
    }
    private static int expandFromCenter(String s,int left,int right){
        while(left>=0&&right<s.length()&&s.charAt(left)==s.charAt(right)){
            left--;
            right++;
        }
        return right-left-1;
    }
    // private static boolean isPalindrome(String sub){
    //     int left=0;
    //     int right=sub.length()-1;
    //     while(left<right){
    //         if(sub.charAt(left)!=sub.charAt(right)) return false;
    //         left++;
    //         right--;
    //     }
    //     return true;
    // }
}
