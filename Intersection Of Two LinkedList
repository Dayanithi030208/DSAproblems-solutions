/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // bruteforce 
        // ListNode tempA=headA;
        // while(tempA!=null){
        //     ListNode tempB=headB;
        //     while(tempB!=null){
        //         if(tempA==tempB){
        //             return tempA;
        //         }
        //         tempB=tempB.next;
        //     }
        //     tempA=tempA.next;
        // }
        // return tempA;
        // better approach
        // ListNode tempA=headA;
        // ListNode tempB=headB;
        // HashSet<ListNode> set=new HashSet<ListNode>();
        // while(tempA!=null){
        //     set.add(tempA);
        //     tempA=tempA.next;
        // }
        // while(tempB!=null){
        //     if(set.contains(tempB)) return tempB;
        //     tempB=tempB.next;
        // }
        // return null;
        // optimal approach
        int lenA=getLengthOfList(headA);
        int lenB=getLengthOfList(headB);
        ListNode tempA=headA;
        ListNode tempB=headB;
        while(lenA>lenB){
            lenA--;
            tempA=tempA.next;
        }
        while(lenB>lenA){
            lenB--;
            tempB=tempB.next;
        }
        while(tempA!=null&&tempB!=null){
            if(tempA==tempB) return tempA;
            tempA=tempA.next;
            tempB=tempB.next;
        }
        return null;
    }
    private static int getLengthOfList(ListNode head){
        ListNode temp=head;
        int cnt=0;
        while(temp!=null){
            cnt++;
            temp=temp.next;
        }
        return cnt;
    }
}
