class Solution {
    public boolean isAnagram(String s, String t) {
        // My approach
        // if(s.length()!=t.length()) return false;
        // HashMap<Character,Integer> map1=new HashMap<>();
        // HashMap<Character,Integer> map2=new HashMap<>();
        // int n=s.length();
        // for(int i=0;i<n;i++){
        //     map1.put(s.charAt(i),map1.getOrDefault(s.charAt(i),0)+1);
        //     map2.put(t.charAt(i),map2.getOrDefault(t.charAt(i),0)+1);
        // }
        // for(Map.Entry<Character,Integer> entry:map1.entrySet()){
        //     char ch=entry.getKey();
        //     if(map2.containsKey(ch)){
        //         if(map1.get(ch)!=map2.get(ch)) return false;
        //     }
        //     else return false;
        // }
        // return true;
        // optimal
        if(s.length()!=t.length())  return false;
        HashMap<Character,Integer> map=new HashMap<>();
        for(char c:s.toCharArray()){
            map.put(c,map.getOrDefault(c,0)+1);
        }
        for(char c:t.toCharArray()){
            if(!map.containsKey(c)) return false;
            map.put(c,map.get(c)-1);
            if(map.get(c)<0) return false;
        }
        return true;
    }
}
