Approach 1:
class Solution {
    public int splitArray(int[] nums, int k) {
        int split_index=0;
        int n=nums.length;
        int maxsplit=Integer.MIN_VALUE;
        int minans=Integer.MAX_VALUE;
        while(split_index<n-1){
            int splitsum1=0;
            for(int i=0;i<=split_index;i++){
                splitsum1+=nums[i];
            }
            int splitsum2=0;
            for(int i=split_index+1;i<n;i++){
                splitsum2+=nums[i];
            }
            maxsplit=Math.max(splitsum1,splitsum2);
            minans=(Math.min(minans,maxsplit));
            split_index++;
        }
        return minans;
    }
}
Approach 2:
class Solution {
    public int splitArray(int[] nums, int k) {
       int max=Integer.MIN_VALUE;
       int totalsum=0;
       for(int num:nums){
        totalsum+=num;
        if(num>max) max=num;
       }
       int ans=0;
       int low=max;
       int high=totalsum;
       while(low<=high){
        int sum=(low+high)/2;
        int kcount=checksplit(nums,sum);
        if(kcount<=k) {
            high=sum-1;
        }
        else{
            low=sum+1;
        }
       }
       return low;
    }
    private static int checksplit(int[] nums,int sum){
        int kcnt=1;
        int indexsum=0;
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(indexsum+nums[i]<=sum){
                indexsum+=nums[i];
            }else{
                kcnt++;
                indexsum=nums[i];
            }
        }
        return kcnt;
    }
}
