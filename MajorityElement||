class Solution {
    public List<Integer> majorityElement(int[] nums) {
        // List<Integer> ans=new ArrayList<>();
        // for(int i=0;i<nums.length;i++){
        //     int cnt=0;
        //     for(int j=0;j<nums.length;j++){
        //         if(nums[i]==nums[j]) cnt++;
        //     }
        //     if(cnt>nums.length/3) {
        //        if(!ans.contains(nums[i])){
        //         ans.add(nums[i]);
        //        }
        //     }
        // }
        // return ans;
        // Map<Integer,Integer> map=new HashMap<>();
        // List<Integer> ans=new ArrayList<>();
        // for(int i=0;i<nums.length;i++){
        //     map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        //     if(map.get(nums[i])>nums.length/3){
        //         if(!ans.contains(nums[i])){
        //             ans.add(nums[i]);
        //         }
        //     }
        // }
        // return ans;
        int cnt1=0,cnt2=0;
        int el1=0,el2=0;
        for(int i=0;i<nums.length;i++){
            if(cnt1==0&&nums[i]!=el2){
                el1=nums[i];
                cnt1++;
            }
            else if(cnt2==0&&nums[i]!=el1){
                el2=nums[i];
                cnt2++;
            }
            else if(el1==nums[i]) cnt1++;
            else if(el2==nums[i]) cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        cnt1=0;
        cnt2=0;
        for(int num:nums){
            if(num==el1) cnt1++;
            if(num==el2) cnt2++;
        }
        List<Integer> ans=new ArrayList<>();
        if(cnt1>nums.length/3) ans.add(el1);
        if(cnt2>nums.length/3) {
            if(!ans.contains(el2)){
                ans.add(el2);
            }
        }
        return ans;
    }
}
