class Solution {
    public int[] findMissingRepeatingNumbers(int[] nums) {
        // int[] ans=new int[2];
        // for(int i=0;i<nums.length;i++){
        //     int ch=i+1;
        //     int cnt=0;
        //     for(int j=0;j<nums.length;j++){
        //         if(ch==nums[j]) cnt++;
        //     }
        //     if(cnt==2) ans[0]=ch;
        //     if(cnt==0) ans[1]=ch;
        // }
        // return ans;
        // int rn=-1,mn=-1;
        // int n=nums.length;
        // int sumarr=0;
        // for(i=0;i<n;i++){
        //     sumarr+=nums[i];
        // }
        // int sumnat=(n*(n+1))/2;
        // int xay=sumarr-sumnat;
        // int sqarr=0;
        // for(int i=0;i<n;i++){
        //     sqarr+=(nums[i]*nums[i]);
        // }
        // int sqnat=(n*(n+1)*((2*n)+1))/6;
        // int xsy=(sqarr-sqnat)/xay;
        // rn=(xay+xsy)/2;
        // mn=xsy-rn;
        // return new int[] {rn,mn};
        int xor=0;
        for(int i=0;i<nums.length;i++){
            xor^=nums[i];
            xor^=i+1;
        }
        int bitno=0;
        while(true){
            if((xor&(1<<bitno))!=0) break;
            bitno++;
        }
        int ones=0;
        int zeros=0;
        for(int i=0;i<nums.length;i++){
            if((nums[i]&(1<<bitno))!=0){
                ones^=nums[i];
            }else{
                zeros^=nums[i];
            }
        }
        for(int i=1;i<=nums.length;i++){
             if((i&(1<<bitno))!=0){
                ones^=i;
            }else{
                zeros^=i;
            }
        }
        int cnt=0;
        for(int num:nums) if(num==zeros) cnt++;
        if(cnt==2) return new int[] {zeros,ones};
        return new int[] {ones,zeros};
    }
}
